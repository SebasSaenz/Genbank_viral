---
title: "Genome size"
date: 2024-03-29
format:
    html:
        code-fold: true
        code-summary: "Show the code"
        highlight-style: github
        code-block-border-left: true
        code-copy: true
execute:
  freeze: auto
---

# Genome size

```{r echo = FALSE, message=FALSE}
library(tidyverse)

df <- read_tsv("rawdata/clean_genomes_data.tsv") %>%
    select(genome_length_bp, jumbophage)

mean_df <- df %>%
    group_by(jumbophage) %>%
    summarize(mean_length = mean(genome_length_bp))

lenght_jumbo <- round(mean_df[2, 2] / 1000, )
lenght_no_jumbo <- round(mean_df[1, 2] / 1000)

max_length <- round(max(df$genome_length_bp) / 1000)

```

::: {.justify}
The average genomes size of the jumbophages is `r lenght_jumbo` kbp while `r lenght_no_jumbo` kbp for no jumbophages. The longest jumbophage in the database has a genome length of `r max_length` kbp.
:::

<br>

```{r message=FALSE}
#| fig-width: 9
#| fig-heigth: 5
#| fig-align: center

library(tidyverse)
library(ggdist)

base_color <- c("#d8b365", "#5ab4ac")

read_tsv("rawdata/clean_genomes_data.tsv") %>%
    select(genome_length_bp, jumbophage) %>%
    mutate(jumbophage = if_else(jumbophage == FALSE,
        "Phage",
        "Jumbophage"
    ), genome_length_bp = genome_length_bp / 1000) %>%
    ggplot(aes(
        y = jumbophage,
        x = genome_length_bp
    )) +
    ggdist::stat_halfeye(
        aes(fill = jumbophage),
        adjust = .5,
        width = 0.1,
        .width = 0,
        justification = -.3,
        point_colour = NA,
        color = "black"
    ) +
    geom_boxplot(
        width = .3,
        outlier.color = NA,
        alpha = 0.3,
        aes(
            color = jumbophage,
            fill = jumbophage
        )
    ) +
    scale_x_continuous(
        limits = c(0, 500),
        breaks = seq(0, 500, 50)
    ) +
    scale_colour_manual(values = base_color) +
    scale_fill_manual(values = base_color) +
    labs(
        y = NULL,
        x = "Genome size (kbp)"
    ) +
    theme(
        text = element_text(
            size = 20,
            color = "black"
        ),
        panel.background = element_blank(),
        panel.grid.major.x = element_line(
            color = "grey",
            linewidth = 0.3,
            linetype = 2
        ),
        # panel.border = element_rect(colour = "black", fill = NA, linewidth = 1),
        legend.position = "none"
    )
```
